
10_I2C_24AA01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e24  08003e24  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e24  08003e24  00004e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e2c  08003e2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e2c  08003e2c  00004e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e30  08003e30  00004e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003e40  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003e40  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eba9  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b0  00000000  00000000  00013be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00015e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cb  00000000  00000000  00016b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e00  00000000  00000000  00017523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001144a  00000000  00000000  0003d323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6d30  00000000  00000000  0004e76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013549d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  001354e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00138810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dc4 	.word	0x08003dc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003dc4 	.word	0x08003dc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <eeprom_wait>:
#define EEPROM_ADDR_READ	0xA1
#define WRITE_TIMEOUT		6

static uint32_t last_write;

void eeprom_wait() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

	while(HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80004bc:	bf00      	nop
 80004be:	f000 fb33 	bl	8000b28 <HAL_GetTick>
 80004c2:	4602      	mov	r2, r0
 80004c4:	4b03      	ldr	r3, [pc, #12]	@ (80004d4 <eeprom_wait+0x1c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d9f7      	bls.n	80004be <eeprom_wait+0x6>
	{
	}

}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000028 	.word	0x20000028

080004d8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af04      	add	r7, sp, #16
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]

	eeprom_wait();
 80004e4:	f7ff ffe8 	bl	80004b8 <eeprom_wait>
	return HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR_READ, addr, 1, data, size, HAL_MAX_DELAY);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f04f 31ff 	mov.w	r1, #4294967295
 80004f4:	9102      	str	r1, [sp, #8]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	21a1      	movs	r1, #161	@ 0xa1
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <eeprom_read+0x38>)
 8000502:	f000 ff5d 	bl	80013c0 <HAL_I2C_Mem_Read>
 8000506:	4603      	mov	r3, r0

}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000002c 	.word	0x2000002c

08000514 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af04      	add	r7, sp, #16
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef rc;

	eeprom_wait();
 8000520:	f7ff ffca 	bl	80004b8 <eeprom_wait>
	rc = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR_WRITE, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	b29a      	uxth	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29b      	uxth	r3, r3
 800052c:	f04f 31ff 	mov.w	r1, #4294967295
 8000530:	9102      	str	r1, [sp, #8]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	21a0      	movs	r1, #160	@ 0xa0
 800053c:	4807      	ldr	r0, [pc, #28]	@ (800055c <eeprom_write+0x48>)
 800053e:	f000 fe2b 	bl	8001198 <HAL_I2C_Mem_Write>
 8000542:	4603      	mov	r3, r0
 8000544:	75fb      	strb	r3, [r7, #23]
	last_write = HAL_GetTick();
 8000546:	f000 faef 	bl	8000b28 <HAL_GetTick>
 800054a:	4603      	mov	r3, r0
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <eeprom_write+0x4c>)
 800054e:	6013      	str	r3, [r2, #0]

	return rc;
 8000550:	7dfb      	ldrb	r3, [r7, #23]

}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c
 8000560:	20000028 	.word	0x20000028

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_GPIO_Init+0x5c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_I2C1_Init+0x7c>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000600:	f000 fd2e 	bl	8001060 <HAL_I2C_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060a:	f000 f903 	bl	8000814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000612:	f001 fab1 	bl	8001b78 <HAL_I2CEx_ConfigAnalogFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f8fa 	bl	8000814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000624:	f001 faf3 	bl	8001c0e <HAL_I2CEx_ConfigDigitalFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f8f1 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000002c 	.word	0x2000002c
 800063c:	40005400 	.word	0x40005400
 8000640:	10d19ce4 	.word	0x10d19ce4

08000644 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b0ac      	sub	sp, #176	@ 0xb0
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2288      	movs	r2, #136	@ 0x88
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fb80 	bl	8003d6a <memset>
  if(i2cHandle->Instance==I2C1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <HAL_I2C_MspInit+0xb0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d13a      	bne.n	80006ea <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000674:	2340      	movs	r3, #64	@ 0x40
 8000676:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f985 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800068c:	f000 f8c2 	bl	8000814 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 8000692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069c:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 800069e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a8:	23c0      	movs	r3, #192	@ 0xc0
 80006aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ae:	2312      	movs	r3, #18
 80006b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c0:	2304      	movs	r3, #4
 80006c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006ca:	4619      	mov	r1, r3
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <HAL_I2C_MspInit+0xb8>)
 80006ce:	f000 fb1d 	bl	8000d0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 80006d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_I2C_MspInit+0xb4>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	37b0      	adds	r7, #176	@ 0xb0
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40005400 	.word	0x40005400
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 f9a6 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f821 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f7ff ff29 	bl	8000564 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000712:	f7ff ff57 	bl	80005c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000716:	f000 f8e9 	bl	80008ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t test = 0x5A;
 800071a:	235a      	movs	r3, #90	@ 0x5a
 800071c:	71fb      	strb	r3, [r7, #7]
  //Zapisanie wartosci ze zmiennej test w zewnetrznej pamieci eeprom o adresie 0x10
  //przy uzyciu I2C:
  if(eeprom_write(0x10, &test, sizeof(test)) != HAL_OK) {
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2010      	movs	r0, #16
 8000726:	f7ff fef5 	bl	8000514 <eeprom_write>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <main+0x34>
	  Error_Handler();
 8000730:	f000 f870 	bl	8000814 <Error_Handler>
  */

  //HAL_Delay(5);

  //Odczytanie wartosci z zewnetrznej pamieci eeprom z adresu 0x10:
  uint8_t result = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	71bb      	strb	r3, [r7, #6]
  while(eeprom_read(0x10, &result, sizeof(result)) != HAL_OK)
 8000738:	bf00      	nop
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2010      	movs	r0, #16
 8000742:	f7ff fec9 	bl	80004d8 <eeprom_read>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f6      	bne.n	800073a <main+0x3a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <main+0x4c>

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	@ 0x58
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2244      	movs	r2, #68	@ 0x44
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fb03 	bl	8003d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000772:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000776:	f001 fab5 	bl	8001ce4 <HAL_PWREx_ControlVoltageScaling>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000780:	f000 f848 	bl	8000814 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000784:	f001 fa90 	bl	8001ca8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemClock_Config+0xc0>)
 800078a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800078e:	4a20      	ldr	r2, [pc, #128]	@ (8000810 <SystemClock_Config+0xc0>)
 8000790:	f023 0318 	bic.w	r3, r3, #24
 8000794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000798:	2314      	movs	r3, #20
 800079a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b0:	2301      	movs	r3, #1
 80007b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007b8:	2328      	movs	r3, #40	@ 0x28
 80007ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007bc:	2307      	movs	r3, #7
 80007be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fadf 	bl	8001d90 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f81c 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2303      	movs	r3, #3
 80007e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2104      	movs	r1, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fea7 	bl	8002548 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000800:	f000 f808 	bl	8000814 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000804:	f002 fbae 	bl	8002f64 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000808:	bf00      	nop
 800080a:	3758      	adds	r7, #88	@ 0x58
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	@ 0x60
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_MspInit+0x44>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	@ 0x58
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <NMI_Handler+0x4>

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <MemManage_Handler+0x4>

08000880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <UsageFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f91f 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f002 fcfa 	bl	8003328 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f7ff ff6b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000080 	.word	0x20000080
 8000948:	40004400 	.word	0x40004400

0800094c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0ac      	sub	sp, #176	@ 0xb0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2288      	movs	r2, #136	@ 0x88
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f003 f9fc 	bl	8003d6a <memset>
  if(uartHandle->Instance==USART2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <HAL_UART_MspInit+0xb0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d13b      	bne.n	80009f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4618      	mov	r0, r3
 800098a:	f002 f801 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000994:	f7ff ff3e 	bl	8000814 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099c:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0xb4>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c8:	230c      	movs	r3, #12
 80009ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e0:	2307      	movs	r3, #7
 80009e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f0:	f000 f98c 	bl	8000d0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009f4:	bf00      	nop
 80009f6:	37b0      	adds	r7, #176	@ 0xb0
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ff5e 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f003 f9a3 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fe63 	bl	8000700 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	2000010c 	.word	0x2000010c

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>

08000a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f91f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f80e 	bl	8000a88 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fed2 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_InitTick+0x6c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_InitTick+0x70>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_InitTick+0x6c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f91d 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10f      	bne.n	8000ade <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d809      	bhi.n	8000ad8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f8f5 	bl	8000cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_InitTick+0x74>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e001      	b.n	8000ae8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000108 	.word	0x20000108

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000108 	.word	0x20000108

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff47 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5c 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb0 	bl	8000c60 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e17f      	b.n	800101c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8171 	beq.w	8001016 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_Init+0x40>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d130      	bne.n	8000dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	f003 0201 	and.w	r2, r3, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d118      	bne.n	8000dec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d017      	beq.n	8000e28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	6939      	ldr	r1, [r7, #16]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80ac 	beq.w	8001016 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8001040 <HAL_GPIO_Init+0x334>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x242>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <HAL_GPIO_Init+0x338>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x23e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001048 <HAL_GPIO_Init+0x33c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x23a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <HAL_GPIO_Init+0x340>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x236>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001050 <HAL_GPIO_Init+0x344>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x232>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	@ (8001054 <HAL_GPIO_Init+0x348>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x22e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001058 <HAL_GPIO_Init+0x34c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x22a>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f60:	4937      	ldr	r1, [pc, #220]	@ (8001040 <HAL_GPIO_Init+0x334>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f92:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_GPIO_Init+0x350>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f ae78 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	48001000 	.word	0x48001000
 8001054:	48001400 	.word	0x48001400
 8001058:	48001800 	.word	0x48001800
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e08d      	b.n	800118e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fadc 	bl	8000644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	@ 0x24
 8001090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e006      	b.n	80010e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d108      	bne.n	8001102 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	e007      	b.n	8001112 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69d9      	ldr	r1, [r3, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2220      	movs	r2, #32
 800117a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	817b      	strh	r3, [r7, #10]
 80011aa:	460b      	mov	r3, r1
 80011ac:	813b      	strh	r3, [r7, #8]
 80011ae:	4613      	mov	r3, r2
 80011b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b20      	cmp	r3, #32
 80011bc:	f040 80f9 	bne.w	80013b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_I2C_Mem_Write+0x34>
 80011c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0ed      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_I2C_Mem_Write+0x4e>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e0e6      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ee:	f7ff fc9b 	bl	8000b28 <HAL_GetTick>
 80011f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2319      	movs	r3, #25
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 fac3 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0d1      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2221      	movs	r2, #33	@ 0x21
 8001214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2240      	movs	r2, #64	@ 0x40
 800121c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6a3a      	ldr	r2, [r7, #32]
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001238:	88f8      	ldrh	r0, [r7, #6]
 800123a:	893a      	ldrh	r2, [r7, #8]
 800123c:	8979      	ldrh	r1, [r7, #10]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4603      	mov	r3, r0
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f9d3 	bl	80015f4 <I2C_RequestMemoryWrite>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0a9      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001264:	b29b      	uxth	r3, r3
 8001266:	2bff      	cmp	r3, #255	@ 0xff
 8001268:	d90e      	bls.n	8001288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	22ff      	movs	r2, #255	@ 0xff
 800126e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001274:	b2da      	uxtb	r2, r3
 8001276:	8979      	ldrh	r1, [r7, #10]
 8001278:	2300      	movs	r3, #0
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 fc47 	bl	8001b14 <I2C_TransferConfig>
 8001286:	e00f      	b.n	80012a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001296:	b2da      	uxtb	r2, r3
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 fc36 	bl	8001b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fac6 	bl	800183e <I2C_WaitOnTXISFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e07b      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d034      	beq.n	8001360 <HAL_I2C_Mem_Write+0x1c8>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d130      	bne.n	8001360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001304:	2200      	movs	r2, #0
 8001306:	2180      	movs	r1, #128	@ 0x80
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 fa3f 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e04d      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	2bff      	cmp	r3, #255	@ 0xff
 8001320:	d90e      	bls.n	8001340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	22ff      	movs	r2, #255	@ 0xff
 8001326:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800132c:	b2da      	uxtb	r2, r3
 800132e:	8979      	ldrh	r1, [r7, #10]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 fbeb 	bl	8001b14 <I2C_TransferConfig>
 800133e:	e00f      	b.n	8001360 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	2300      	movs	r3, #0
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fbda 	bl	8001b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d19e      	bne.n	80012a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 faac 	bl	80018cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e01a      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_I2C_Mem_Write+0x224>)
 8001392:	400b      	ands	r3, r1
 8001394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	fe00e800 	.word	0xfe00e800

080013c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	460b      	mov	r3, r1
 80013d4:	813b      	strh	r3, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	f040 80fd 	bne.w	80015e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_I2C_Mem_Read+0x34>
 80013ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0f1      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_I2C_Mem_Read+0x4e>
 800140a:	2302      	movs	r3, #2
 800140c:	e0ea      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001416:	f7ff fb87 	bl	8000b28 <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2319      	movs	r3, #25
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 f9af 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d5      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2222      	movs	r2, #34	@ 0x22
 800143c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2240      	movs	r2, #64	@ 0x40
 8001444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001460:	88f8      	ldrh	r0, [r7, #6]
 8001462:	893a      	ldrh	r2, [r7, #8]
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4603      	mov	r3, r0
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f913 	bl	800169c <I2C_RequestMemoryRead>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0ad      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800148c:	b29b      	uxth	r3, r3
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d90e      	bls.n	80014b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	b2da      	uxtb	r2, r3
 800149e:	8979      	ldrh	r1, [r7, #10]
 80014a0:	4b52      	ldr	r3, [pc, #328]	@ (80015ec <HAL_I2C_Mem_Read+0x22c>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fb33 	bl	8001b14 <I2C_TransferConfig>
 80014ae:	e00f      	b.n	80014d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	8979      	ldrh	r1, [r7, #10]
 80014c2:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_I2C_Mem_Read+0x22c>)
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fb22 	bl	8001b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	2104      	movs	r1, #4
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f956 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07c      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d034      	beq.n	8001590 <HAL_I2C_Mem_Read+0x1d0>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	d130      	bne.n	8001590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	2200      	movs	r2, #0
 8001536:	2180      	movs	r1, #128	@ 0x80
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f927 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e04d      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d90e      	bls.n	8001570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fad3 	bl	8001b14 <I2C_TransferConfig>
 800156e:	e00f      	b.n	8001590 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001574:	b29a      	uxth	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800157e:	b2da      	uxtb	r2, r3
 8001580:	8979      	ldrh	r1, [r7, #10]
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fac2 	bl	8001b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d19a      	bne.n	80014d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f994 	bl	80018cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e01a      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_I2C_Mem_Read+0x230>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80015e2:	2302      	movs	r3, #2
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	80002400 	.word	0x80002400
 80015f0:	fe00e800 	.word	0xfe00e800

080015f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <I2C_RequestMemoryWrite+0xa4>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fa79 	bl	8001b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	69b9      	ldr	r1, [r7, #24]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f909 	bl	800183e <I2C_WaitOnTXISFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e02c      	b.n	8001690 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800163c:	893b      	ldrh	r3, [r7, #8]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
 8001646:	e015      	b.n	8001674 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001648:	893b      	ldrh	r3, [r7, #8]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f8ef 	bl	800183e <I2C_WaitOnTXISFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e012      	b.n	8001690 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800166a:	893b      	ldrh	r3, [r7, #8]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2200      	movs	r2, #0
 800167c:	2180      	movs	r1, #128	@ 0x80
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f884 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	80002000 	.word	0x80002000

0800169c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <I2C_RequestMemoryRead+0xa4>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fa26 	bl	8001b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 f8b6 	bl	800183e <I2C_WaitOnTXISFlagUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e02c      	b.n	8001736 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016e2:	893b      	ldrh	r3, [r7, #8]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80016ec:	e015      	b.n	800171a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016ee:	893b      	ldrh	r3, [r7, #8]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f89c 	bl	800183e <I2C_WaitOnTXISFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e012      	b.n	8001736 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001710:	893b      	ldrh	r3, [r7, #8]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	@ 0x40
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f831 	bl	800178c <I2C_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	80002000 	.word	0x80002000

08001744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d103      	bne.n	8001762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d007      	beq.n	8001780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	619a      	str	r2, [r3, #24]
  }
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800179c:	e03b      	b.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f8d6 	bl	8001954 <I2C_IsErrorOccurred>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e041      	b.n	8001836 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d02d      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff f9b5 	bl	8000b28 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d122      	bne.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4013      	ands	r3, r2
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	429a      	cmp	r2, r3
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d113      	bne.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f043 0220 	orr.w	r2, r3, #32
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4013      	ands	r3, r2
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	bf0c      	ite	eq
 8001826:	2301      	moveq	r3, #1
 8001828:	2300      	movne	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	429a      	cmp	r2, r3
 8001832:	d0b4      	beq.n	800179e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800184a:	e033      	b.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f87f 	bl	8001954 <I2C_IsErrorOccurred>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e031      	b.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d025      	beq.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff f95e 	bl	8000b28 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11a      	bne.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b02      	cmp	r3, #2
 800188a:	d013      	beq.n	80018b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e007      	b.n	80018c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d1c4      	bne.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d8:	e02f      	b.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f838 	bl	8001954 <I2C_IsErrorOccurred>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02d      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ee:	f7ff f91b 	bl	8000b28 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d302      	bcc.n	8001904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d11a      	bne.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b20      	cmp	r3, #32
 8001910:	d013      	beq.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f043 0220 	orr.w	r2, r3, #32
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e007      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d1c8      	bne.n	80018da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d068      	beq.n	8001a52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001988:	e049      	b.n	8001a1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d045      	beq.n	8001a1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001992:	f7ff f8c9 	bl	8000b28 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d302      	bcc.n	80019a8 <I2C_IsErrorOccurred+0x54>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d13a      	bne.n	8001a1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019ca:	d121      	bne.n	8001a10 <I2C_IsErrorOccurred+0xbc>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019d2:	d01d      	beq.n	8001a10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80019d4:	7cfb      	ldrb	r3, [r7, #19]
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d01a      	beq.n	8001a10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019ea:	f7ff f89d 	bl	8000b28 <HAL_GetTick>
 80019ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f0:	e00e      	b.n	8001a10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019f2:	f7ff f899 	bl	8000b28 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b19      	cmp	r3, #25
 80019fe:	d907      	bls.n	8001a10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001a0e:	e006      	b.n	8001a1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d1e9      	bne.n	80019f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d003      	beq.n	8001a34 <I2C_IsErrorOccurred+0xe0>
 8001a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0aa      	beq.n	800198a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00b      	beq.n	8001a7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00b      	beq.n	8001ac0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01c      	beq.n	8001b02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fe3b 	bl	8001744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <I2C_IsErrorOccurred+0x1bc>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3728      	adds	r7, #40	@ 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	fe00e800 	.word	0xfe00e800

08001b14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	817b      	strh	r3, [r7, #10]
 8001b22:	4613      	mov	r3, r2
 8001b24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b2c:	7a7b      	ldrb	r3, [r7, #9]
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	0d5b      	lsrs	r3, r3, #21
 8001b4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <I2C_TransferConfig+0x60>)
 8001b54:	430b      	orrs	r3, r1
 8001b56:	43db      	mvns	r3, r3
 8001b58:	ea02 0103 	and.w	r1, r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	03ff63ff 	.word	0x03ff63ff

08001b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d138      	bne.n	8001c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e032      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d139      	bne.n	8001c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e033      	b.n	8001c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2224      	movs	r2, #36	@ 0x24
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf2:	d130      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d00:	d038      	beq.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2232      	movs	r2, #50	@ 0x32
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d28:	e002      	b.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3c:	d102      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f2      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d50:	d110      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e00f      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d62:	d007      	beq.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d6c:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40007000 	.word	0x40007000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e3ca      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b97      	ldr	r3, [pc, #604]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b94      	ldr	r3, [pc, #592]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80e4 	beq.w	8001f8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_RCC_OscConfig+0x4a>
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	f040 808b 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 8087 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dda:	4b89      	ldr	r3, [pc, #548]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x62>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e3a2      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_RCC_OscConfig+0x7c>
 8001e02:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_OscConfig+0x88>
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d223      	bcs.n	8001e64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fd55 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e383      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	4b73      	ldr	r3, [pc, #460]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a72      	ldr	r2, [pc, #456]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b70      	ldr	r3, [pc, #448]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	496d      	ldr	r1, [pc, #436]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4968      	ldr	r1, [pc, #416]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4960      	ldr	r1, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e82:	4b5f      	ldr	r3, [pc, #380]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	495b      	ldr	r1, [pc, #364]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fd15 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e343      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb0:	f000 fc4a 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	4950      	ldr	r1, [pc, #320]	@ (8002004 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8002008 <HAL_RCC_OscConfig+0x278>)
 8001ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fdd7 	bl	8000a88 <HAL_InitTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d052      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	e327      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d032      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef0:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a42      	ldr	r2, [pc, #264]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe14 	bl	8000b28 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f04:	f7fe fe10 	bl	8000b28 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e310      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f16:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a36      	ldr	r2, [pc, #216]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4931      	ldr	r1, [pc, #196]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	492c      	ldr	r1, [pc, #176]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e01a      	b.n	8001f8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a29      	ldr	r2, [pc, #164]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fde1 	bl	8000b28 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7fe fddd 	bl	8000b28 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2dd      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x1da>
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d074      	beq.n	8002082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x21a>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d064      	beq.n	8002080 <HAL_RCC_OscConfig+0x2f0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d160      	bne.n	8002080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e2ba      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x24a>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e026      	b.n	8002028 <HAL_RCC_OscConfig+0x298>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe2:	d115      	bne.n	8002010 <HAL_RCC_OscConfig+0x280>
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a02      	ldr	r2, [pc, #8]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x298>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	08003ddc 	.word	0x08003ddc
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004
 8002010:	4ba0      	ldr	r3, [pc, #640]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a9f      	ldr	r2, [pc, #636]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b9d      	ldr	r3, [pc, #628]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a9c      	ldr	r2, [pc, #624]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fd7a 	bl	8000b28 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe fd76 	bl	8000b28 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e276      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	4b92      	ldr	r3, [pc, #584]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x2a8>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fd66 	bl	8000b28 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe fd62 	bl	8000b28 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e262      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002072:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d0>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d060      	beq.n	8002150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x310>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d119      	bne.n	80020ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d116      	bne.n	80020ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x328>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e23f      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	4973      	ldr	r1, [pc, #460]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	e040      	b.n	8002150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fd21 	bl	8000b28 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe fd1d 	bl	8000b28 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e21d      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	4b65      	ldr	r3, [pc, #404]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b62      	ldr	r3, [pc, #392]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	495f      	ldr	r1, [pc, #380]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e018      	b.n	8002150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5c      	ldr	r2, [pc, #368]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fcfd 	bl	8000b28 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe fcf9 	bl	8000b28 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1f9      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d03c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01c      	beq.n	800219e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002164:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216a:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe fcd8 	bl	8000b28 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7fe fcd4 	bl	8000b28 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1d4      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218e:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCC_OscConfig+0x3ec>
 800219c:	e01b      	b.n	80021d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219e:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7fe fcbb 	bl	8000b28 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b6:	f7fe fcb7 	bl	8000b28 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1b7      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ef      	bne.n	80021b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80a6 	beq.w	8002330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220c:	2301      	movs	r3, #1
 800220e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d118      	bne.n	800224e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002228:	f7fe fc7e 	bl	8000b28 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fc7a 	bl	8000b28 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e17a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002266:	e029      	b.n	80022bc <HAL_RCC_OscConfig+0x52c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d115      	bne.n	800229c <HAL_RCC_OscConfig+0x50c>
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002276:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	4a03      	ldr	r2, [pc, #12]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002290:	e014      	b.n	80022bc <HAL_RCC_OscConfig+0x52c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	4b9c      	ldr	r3, [pc, #624]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a2:	4a9b      	ldr	r2, [pc, #620]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ac:	4b98      	ldr	r3, [pc, #608]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b2:	4a97      	ldr	r2, [pc, #604]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d016      	beq.n	80022f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fc30 	bl	8000b28 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fc2c 	bl	8000b28 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e12a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ed      	beq.n	80022cc <HAL_RCC_OscConfig+0x53c>
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7fe fc19 	bl	8000b28 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fc15 	bl	8000b28 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e113      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002310:	4b7f      	ldr	r3, [pc, #508]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ed      	bne.n	80022fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b7a      	ldr	r3, [pc, #488]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4a79      	ldr	r2, [pc, #484]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80fe 	beq.w	8002536 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 80d0 	bne.w	80024e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002344:	4b72      	ldr	r3, [pc, #456]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	429a      	cmp	r2, r3
 8002356:	d130      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	3b01      	subs	r3, #1
 8002364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d127      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11f      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002384:	2a07      	cmp	r2, #7
 8002386:	bf14      	ite	ne
 8002388:	2201      	movne	r2, #1
 800238a:	2200      	moveq	r2, #0
 800238c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	3b01      	subs	r3, #1
 80023a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d06e      	beq.n	8002498 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d069      	beq.n	8002494 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0ad      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023e8:	f7fe fb9e 	bl	8000b28 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fb9a 	bl	8000b28 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e09a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002402:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240e:	4b40      	ldr	r3, [pc, #256]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <HAL_RCC_OscConfig+0x784>)
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800241e:	3a01      	subs	r2, #1
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002428:	0212      	lsls	r2, r2, #8
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002430:	0852      	lsrs	r2, r2, #1
 8002432:	3a01      	subs	r2, #1
 8002434:	0552      	lsls	r2, r2, #21
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800243c:	0852      	lsrs	r2, r2, #1
 800243e:	3a01      	subs	r2, #1
 8002440:	0652      	lsls	r2, r2, #25
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002448:	0912      	lsrs	r2, r2, #4
 800244a:	0452      	lsls	r2, r2, #17
 800244c:	430a      	orrs	r2, r1
 800244e:	4930      	ldr	r1, [pc, #192]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002454:	4b2e      	ldr	r3, [pc, #184]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2d      	ldr	r2, [pc, #180]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246c:	f7fe fb5c 	bl	8000b28 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fb58 	bl	8000b28 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e058      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002492:	e050      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e04f      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d148      	bne.n	8002536 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b0:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024bc:	f7fe fb34 	bl	8000b28 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fb30 	bl	8000b28 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e030      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x734>
 80024e2:	e028      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d023      	beq.n	8002532 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fb17 	bl	8000b28 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e00c      	b.n	8002518 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fb13 	bl	8000b28 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d905      	bls.n	8002518 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e013      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
 8002510:	40021000 	.word	0x40021000
 8002514:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ec      	bne.n	80024fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4905      	ldr	r1, [pc, #20]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_OscConfig+0x7b4>)
 800252c:	4013      	ands	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
 8002530:	e001      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	feeefffc 	.word	0xfeeefffc

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0e7      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b75      	ldr	r3, [pc, #468]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b72      	ldr	r3, [pc, #456]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	4970      	ldr	r1, [pc, #448]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b6e      	ldr	r3, [pc, #440]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0cf      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b63      	ldr	r3, [pc, #396]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4960      	ldr	r1, [pc, #384]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04c      	beq.n	8002660 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d121      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0a6      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e6:	4b54      	ldr	r3, [pc, #336]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e09a      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e08e      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260e:	4b4a      	ldr	r3, [pc, #296]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e086      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b46      	ldr	r3, [pc, #280]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4943      	ldr	r1, [pc, #268]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002630:	f7fe fa7a 	bl	8000b28 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe fa76 	bl	8000b28 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e06e      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002678:	429a      	cmp	r2, r3
 800267a:	d208      	bcs.n	800268e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	492b      	ldr	r1, [pc, #172]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268e:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d210      	bcs.n	80026be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0207 	bic.w	r2, r3, #7
 80026a4:	4923      	ldr	r1, [pc, #140]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ac:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e036      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4918      	ldr	r1, [pc, #96]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4910      	ldr	r1, [pc, #64]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fc:	f000 f824 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	490b      	ldr	r1, [pc, #44]	@ (800273c <HAL_RCC_ClockConfig+0x1f4>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 800271a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_ClockConfig+0x1fc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f9b1 	bl	8000a88 <HAL_InitTick>
 8002726:	4603      	mov	r3, r0
 8002728:	72fb      	strb	r3, [r7, #11]

  return status;
 800272a:	7afb      	ldrb	r3, [r7, #11]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	08003ddc 	.word	0x08003ddc
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d121      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11e      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e004      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d134      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xa6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ec:	e005      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f0:	617b      	str	r3, [r7, #20]
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027f6:	617b      	str	r3, [r7, #20]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0e5b      	lsrs	r3, r3, #25
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	3301      	adds	r3, #1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	08003df4 	.word	0x08003df4
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08003dec 	.word	0x08003dec

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a8:	f7ff ffda 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08003dec 	.word	0x08003dec

080028d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e8:	f7ff f9ee 	bl	8001cc8 <HAL_PWREx_GetVoltageRange>
 80028ec:	6178      	str	r0, [r7, #20]
 80028ee:	e014      	b.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002908:	f7ff f9de 	bl	8001cc8 <HAL_PWREx_GetVoltageRange>
 800290c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002920:	d10b      	bne.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b80      	cmp	r3, #128	@ 0x80
 8002926:	d919      	bls.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2ba0      	cmp	r3, #160	@ 0xa0
 800292c:	d902      	bls.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800292e:	2302      	movs	r3, #2
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e013      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e010      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	@ 0x80
 800293e:	d902      	bls.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002940:	2303      	movs	r3, #3
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e00a      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b80      	cmp	r3, #128	@ 0x80
 800294a:	d102      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800294c:	2302      	movs	r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e004      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b70      	cmp	r3, #112	@ 0x70
 8002956:	d101      	bne.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002958:	2301      	movs	r3, #1
 800295a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 0207 	bic.w	r2, r3, #7
 8002964:	4909      	ldr	r1, [pc, #36]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002998:	2300      	movs	r3, #0
 800299a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800299c:	2300      	movs	r3, #0
 800299e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d041      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029b4:	d02a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029ba:	d824      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c6:	d81e      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d0:	d010      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d2:	e018      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d4:	4b86      	ldr	r3, [pc, #536]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a85      	ldr	r2, [pc, #532]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e0:	e015      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 facb 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f2:	e00c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3320      	adds	r3, #32
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fbb6 	bl	800316c <RCCEx_PLLSAI2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	74fb      	strb	r3, [r7, #19]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a14:	4b76      	ldr	r3, [pc, #472]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a22:	4973      	ldr	r1, [pc, #460]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d041      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a44:	d02a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a4a:	d824      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a56:	d81e      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d010      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a62:	e018      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a64:	4b62      	ldr	r3, [pc, #392]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a61      	ldr	r2, [pc, #388]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a70:	e015      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa83 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a82:	e00c      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3320      	adds	r3, #32
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fb6e 	bl	800316c <RCCEx_PLLSAI2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a94:	e003      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	74fb      	strb	r3, [r7, #19]
      break;
 8002a9a:	e000      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aa4:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab2:	494f      	ldr	r1, [pc, #316]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002aba:	e001      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a0 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b41      	ldr	r3, [pc, #260]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a40      	ldr	r2, [pc, #256]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b10:	f7fe f80a 	bl	8000b28 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b16:	e009      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe f806 	bl	8000b28 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2c:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d15c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d019      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b68:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	4a20      	ldr	r2, [pc, #128]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fd ffc5 	bl	8000b28 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	e00b      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fd ffc1 	bl	8000b28 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d902      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ec      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002be6:	e009      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfc:	7c7b      	ldrb	r3, [r7, #17]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b9e      	ldr	r3, [pc, #632]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	4a9d      	ldr	r2, [pc, #628]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1a:	4b98      	ldr	r3, [pc, #608]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c20:	f023 0203 	bic.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	4994      	ldr	r1, [pc, #592]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f023 020c 	bic.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	498c      	ldr	r1, [pc, #560]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5e:	4b87      	ldr	r3, [pc, #540]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	4983      	ldr	r1, [pc, #524]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c80:	4b7e      	ldr	r3, [pc, #504]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	497b      	ldr	r1, [pc, #492]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca2:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb0:	4972      	ldr	r1, [pc, #456]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	496a      	ldr	r1, [pc, #424]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	4961      	ldr	r1, [pc, #388]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d08:	4b5c      	ldr	r3, [pc, #368]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	4959      	ldr	r1, [pc, #356]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	4950      	ldr	r1, [pc, #320]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	4948      	ldr	r1, [pc, #288]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6e:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	493f      	ldr	r1, [pc, #252]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d028      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d90:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9e:	4937      	ldr	r1, [pc, #220]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dae:	d106      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dba:	60d3      	str	r3, [r2, #12]
 8002dbc:	e011      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f8d8 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d028      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dee:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfc:	491f      	ldr	r1, [pc, #124]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a1a      	ldr	r2, [pc, #104]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e18:	60d3      	str	r3, [r2, #12]
 8002e1a:	e011      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f8a9 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02b      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5a:	4908      	ldr	r1, [pc, #32]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a02      	ldr	r2, [pc, #8]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e76:	60d3      	str	r3, [r2, #12]
 8002e78:	e014      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f877 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02f      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ebe:	4928      	ldr	r1, [pc, #160]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ece:	d10d      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f854 	bl	8002f84 <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	74bb      	strb	r3, [r7, #18]
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3320      	adds	r3, #32
 8002efa:	2102      	movs	r1, #2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f935 	bl	800316c <RCCEx_PLLSAI2_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f1c:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f2a:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f4e:	4904      	ldr	r1, [pc, #16]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f92:	4b75      	ldr	r3, [pc, #468]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f9e:	4b72      	ldr	r3, [pc, #456]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d047      	beq.n	800305a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e044      	b.n	800305a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d018      	beq.n	800300a <RCCEx_PLLSAI1_Config+0x86>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d825      	bhi.n	8003028 <RCCEx_PLLSAI1_Config+0xa4>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <RCCEx_PLLSAI1_Config+0x62>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d009      	beq.n	8002ff8 <RCCEx_PLLSAI1_Config+0x74>
 8002fe4:	e020      	b.n	8003028 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe6:	4b60      	ldr	r3, [pc, #384]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff6:	e01a      	b.n	800302e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e013      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300a:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003016:	4b54      	ldr	r3, [pc, #336]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003026:	e006      	b.n	8003036 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      break;
 800302c:	e004      	b.n	8003038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003036:	bf00      	nop
    }

    if(status == HAL_OK)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	430b      	orrs	r3, r1
 8003054:	4944      	ldr	r1, [pc, #272]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d17d      	bne.n	800315c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003060:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a40      	ldr	r2, [pc, #256]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800306a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fd fd5c 	bl	8000b28 <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003074:	f7fd fd58 	bl	8000b28 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
        break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003088:	4b37      	ldr	r3, [pc, #220]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ef      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d160      	bne.n	800315c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a0:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	0211      	lsls	r1, r2, #8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	0912      	lsrs	r2, r2, #4
 80030b8:	0452      	lsls	r2, r2, #17
 80030ba:	430a      	orrs	r2, r1
 80030bc:	492a      	ldr	r1, [pc, #168]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]
 80030c2:	e027      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d112      	bne.n	80030f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80030d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	0211      	lsls	r1, r2, #8
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6912      	ldr	r2, [r2, #16]
 80030e0:	0852      	lsrs	r2, r2, #1
 80030e2:	3a01      	subs	r2, #1
 80030e4:	0552      	lsls	r2, r2, #21
 80030e6:	430a      	orrs	r2, r1
 80030e8:	491f      	ldr	r1, [pc, #124]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	610b      	str	r3, [r1, #16]
 80030ee:	e011      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6892      	ldr	r2, [r2, #8]
 8003100:	0211      	lsls	r1, r2, #8
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6952      	ldr	r2, [r2, #20]
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0652      	lsls	r2, r2, #25
 800310c:	430a      	orrs	r2, r1
 800310e:	4916      	ldr	r1, [pc, #88]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003114:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a13      	ldr	r2, [pc, #76]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800311e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd fd02 	bl	8000b28 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003126:	e009      	b.n	800313c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003128:	f7fd fcfe 	bl	8000b28 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	73fb      	strb	r3, [r7, #15]
          break;
 800313a:	e005      	b.n	8003148 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800313c:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4904      	ldr	r1, [pc, #16]	@ (8003168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800317a:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003186:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0203 	and.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
       ||
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800319e:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
       ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d047      	beq.n	8003242 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e044      	b.n	8003242 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d018      	beq.n	80031f2 <RCCEx_PLLSAI2_Config+0x86>
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d825      	bhi.n	8003210 <RCCEx_PLLSAI2_Config+0xa4>
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d002      	beq.n	80031ce <RCCEx_PLLSAI2_Config+0x62>
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d009      	beq.n	80031e0 <RCCEx_PLLSAI2_Config+0x74>
 80031cc:	e020      	b.n	8003210 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ce:	4b55      	ldr	r3, [pc, #340]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11d      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031de:	e01a      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e0:	4b50      	ldr	r3, [pc, #320]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d116      	bne.n	800321a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e013      	b.n	800321a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031fe:	4b49      	ldr	r3, [pc, #292]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800320e:	e006      	b.n	800321e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e004      	b.n	8003220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800321e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003226:	4b3f      	ldr	r3, [pc, #252]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	430b      	orrs	r3, r1
 800323c:	4939      	ldr	r1, [pc, #228]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d167      	bne.n	8003318 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003248:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a35      	ldr	r2, [pc, #212]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fd fc68 	bl	8000b28 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800325a:	e009      	b.n	8003270 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800325c:	f7fd fc64 	bl	8000b28 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	73fb      	strb	r3, [r7, #15]
        break;
 800326e:	e005      	b.n	800327c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003270:	4b2c      	ldr	r3, [pc, #176]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ef      	bne.n	800325c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d14a      	bne.n	8003318 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003288:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	0211      	lsls	r1, r2, #8
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	0912      	lsrs	r2, r2, #4
 80032a0:	0452      	lsls	r2, r2, #17
 80032a2:	430a      	orrs	r2, r1
 80032a4:	491f      	ldr	r1, [pc, #124]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	614b      	str	r3, [r1, #20]
 80032aa:	e011      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	0211      	lsls	r1, r2, #8
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6912      	ldr	r2, [r2, #16]
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0652      	lsls	r2, r2, #25
 80032c8:	430a      	orrs	r2, r1
 80032ca:	4916      	ldr	r1, [pc, #88]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fd fc24 	bl	8000b28 <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032e2:	e009      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e4:	f7fd fc20 	bl	8000b28 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	73fb      	strb	r3, [r7, #15]
          break;
 80032f6:	e005      	b.n	8003304 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ef      	beq.n	80032e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4904      	ldr	r1, [pc, #16]	@ (8003324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003314:	4313      	orrs	r3, r2
 8003316:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e040      	b.n	80033bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fafe 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fae0 	bl	8003934 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f825 	bl	80033c4 <UART_SetConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01b      	b.n	80033bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb5f 	bl	8003a78 <UART_CheckIdleState>
 80033ba:	4603      	mov	r3, r0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b08a      	sub	sp, #40	@ 0x28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003684 <UART_SetConfig+0x2c0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a99      	ldr	r2, [pc, #612]	@ (8003688 <UART_SetConfig+0x2c4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	4313      	orrs	r3, r2
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a90      	ldr	r2, [pc, #576]	@ (800368c <UART_SetConfig+0x2c8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d126      	bne.n	800349c <UART_SetConfig+0xd8>
 800344e:	4b90      	ldr	r3, [pc, #576]	@ (8003690 <UART_SetConfig+0x2cc>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d81b      	bhi.n	8003494 <UART_SetConfig+0xd0>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <UART_SetConfig+0xa0>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003475 	.word	0x08003475
 8003468:	08003485 	.word	0x08003485
 800346c:	0800347d 	.word	0x0800347d
 8003470:	0800348d 	.word	0x0800348d
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347a:	e116      	b.n	80036aa <UART_SetConfig+0x2e6>
 800347c:	2302      	movs	r3, #2
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003482:	e112      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003484:	2304      	movs	r3, #4
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348a:	e10e      	b.n	80036aa <UART_SetConfig+0x2e6>
 800348c:	2308      	movs	r3, #8
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003492:	e10a      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003494:	2310      	movs	r3, #16
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349a:	e106      	b.n	80036aa <UART_SetConfig+0x2e6>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003694 <UART_SetConfig+0x2d0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d138      	bne.n	8003518 <UART_SetConfig+0x154>
 80034a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003690 <UART_SetConfig+0x2cc>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d82d      	bhi.n	8003510 <UART_SetConfig+0x14c>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <UART_SetConfig+0xf8>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034f1 	.word	0x080034f1
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003511 	.word	0x08003511
 80034c8:	08003511 	.word	0x08003511
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003511 	.word	0x08003511
 80034d8:	08003511 	.word	0x08003511
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	08003511 	.word	0x08003511
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003509 	.word	0x08003509
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f6:	e0d8      	b.n	80036aa <UART_SetConfig+0x2e6>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fe:	e0d4      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e0d0      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350e:	e0cc      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e0c8      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5e      	ldr	r2, [pc, #376]	@ (8003698 <UART_SetConfig+0x2d4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d125      	bne.n	800356e <UART_SetConfig+0x1aa>
 8003522:	4b5b      	ldr	r3, [pc, #364]	@ (8003690 <UART_SetConfig+0x2cc>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800352c:	2b30      	cmp	r3, #48	@ 0x30
 800352e:	d016      	beq.n	800355e <UART_SetConfig+0x19a>
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d818      	bhi.n	8003566 <UART_SetConfig+0x1a2>
 8003534:	2b20      	cmp	r3, #32
 8003536:	d00a      	beq.n	800354e <UART_SetConfig+0x18a>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d814      	bhi.n	8003566 <UART_SetConfig+0x1a2>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <UART_SetConfig+0x182>
 8003540:	2b10      	cmp	r3, #16
 8003542:	d008      	beq.n	8003556 <UART_SetConfig+0x192>
 8003544:	e00f      	b.n	8003566 <UART_SetConfig+0x1a2>
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354c:	e0ad      	b.n	80036aa <UART_SetConfig+0x2e6>
 800354e:	2302      	movs	r3, #2
 8003550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003554:	e0a9      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003556:	2304      	movs	r3, #4
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355c:	e0a5      	b.n	80036aa <UART_SetConfig+0x2e6>
 800355e:	2308      	movs	r3, #8
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003564:	e0a1      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003566:	2310      	movs	r3, #16
 8003568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356c:	e09d      	b.n	80036aa <UART_SetConfig+0x2e6>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4a      	ldr	r2, [pc, #296]	@ (800369c <UART_SetConfig+0x2d8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d125      	bne.n	80035c4 <UART_SetConfig+0x200>
 8003578:	4b45      	ldr	r3, [pc, #276]	@ (8003690 <UART_SetConfig+0x2cc>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003582:	2bc0      	cmp	r3, #192	@ 0xc0
 8003584:	d016      	beq.n	80035b4 <UART_SetConfig+0x1f0>
 8003586:	2bc0      	cmp	r3, #192	@ 0xc0
 8003588:	d818      	bhi.n	80035bc <UART_SetConfig+0x1f8>
 800358a:	2b80      	cmp	r3, #128	@ 0x80
 800358c:	d00a      	beq.n	80035a4 <UART_SetConfig+0x1e0>
 800358e:	2b80      	cmp	r3, #128	@ 0x80
 8003590:	d814      	bhi.n	80035bc <UART_SetConfig+0x1f8>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <UART_SetConfig+0x1d8>
 8003596:	2b40      	cmp	r3, #64	@ 0x40
 8003598:	d008      	beq.n	80035ac <UART_SetConfig+0x1e8>
 800359a:	e00f      	b.n	80035bc <UART_SetConfig+0x1f8>
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a2:	e082      	b.n	80036aa <UART_SetConfig+0x2e6>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e07e      	b.n	80036aa <UART_SetConfig+0x2e6>
 80035ac:	2304      	movs	r3, #4
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e07a      	b.n	80036aa <UART_SetConfig+0x2e6>
 80035b4:	2308      	movs	r3, #8
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e076      	b.n	80036aa <UART_SetConfig+0x2e6>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e072      	b.n	80036aa <UART_SetConfig+0x2e6>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <UART_SetConfig+0x2dc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d12a      	bne.n	8003624 <UART_SetConfig+0x260>
 80035ce:	4b30      	ldr	r3, [pc, #192]	@ (8003690 <UART_SetConfig+0x2cc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035dc:	d01a      	beq.n	8003614 <UART_SetConfig+0x250>
 80035de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035e2:	d81b      	bhi.n	800361c <UART_SetConfig+0x258>
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e8:	d00c      	beq.n	8003604 <UART_SetConfig+0x240>
 80035ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ee:	d815      	bhi.n	800361c <UART_SetConfig+0x258>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <UART_SetConfig+0x238>
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x248>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x258>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e052      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e04e      	b.n	80036aa <UART_SetConfig+0x2e6>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e04a      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e046      	b.n	80036aa <UART_SetConfig+0x2e6>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003622:	e042      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <UART_SetConfig+0x2c4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d13a      	bne.n	80036a4 <UART_SetConfig+0x2e0>
 800362e:	4b18      	ldr	r3, [pc, #96]	@ (8003690 <UART_SetConfig+0x2cc>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003638:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800363c:	d01a      	beq.n	8003674 <UART_SetConfig+0x2b0>
 800363e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003642:	d81b      	bhi.n	800367c <UART_SetConfig+0x2b8>
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003648:	d00c      	beq.n	8003664 <UART_SetConfig+0x2a0>
 800364a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800364e:	d815      	bhi.n	800367c <UART_SetConfig+0x2b8>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <UART_SetConfig+0x298>
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003658:	d008      	beq.n	800366c <UART_SetConfig+0x2a8>
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x2b8>
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003662:	e022      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003664:	2302      	movs	r3, #2
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366a:	e01e      	b.n	80036aa <UART_SetConfig+0x2e6>
 800366c:	2304      	movs	r3, #4
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003672:	e01a      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003674:	2308      	movs	r3, #8
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367a:	e016      	b.n	80036aa <UART_SetConfig+0x2e6>
 800367c:	2310      	movs	r3, #16
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e012      	b.n	80036aa <UART_SetConfig+0x2e6>
 8003684:	efff69f3 	.word	0xefff69f3
 8003688:	40008000 	.word	0x40008000
 800368c:	40013800 	.word	0x40013800
 8003690:	40021000 	.word	0x40021000
 8003694:	40004400 	.word	0x40004400
 8003698:	40004800 	.word	0x40004800
 800369c:	40004c00 	.word	0x40004c00
 80036a0:	40005000 	.word	0x40005000
 80036a4:	2310      	movs	r3, #16
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a9f      	ldr	r2, [pc, #636]	@ (800392c <UART_SetConfig+0x568>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d17a      	bne.n	80037aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d824      	bhi.n	8003706 <UART_SetConfig+0x342>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0x300>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	08003707 	.word	0x08003707
 80036d4:	080036f7 	.word	0x080036f7
 80036d8:	08003707 	.word	0x08003707
 80036dc:	08003707 	.word	0x08003707
 80036e0:	08003707 	.word	0x08003707
 80036e4:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7ff f8c6 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80036ec:	61f8      	str	r0, [r7, #28]
        break;
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003930 <UART_SetConfig+0x56c>)
 80036f2:	61fb      	str	r3, [r7, #28]
        break;
 80036f4:	e00d      	b.n	8003712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7ff f827 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80036fa:	61f8      	str	r0, [r7, #28]
        break;
 80036fc:	e009      	b.n	8003712 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	61fb      	str	r3, [r7, #28]
        break;
 8003704:	e005      	b.n	8003712 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80fb 	beq.w	8003910 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	429a      	cmp	r2, r3
 8003728:	d305      	bcc.n	8003736 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	429a      	cmp	r2, r3
 8003734:	d903      	bls.n	800373e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800373c:	e0e8      	b.n	8003910 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2200      	movs	r2, #0
 8003742:	461c      	mov	r4, r3
 8003744:	4615      	mov	r5, r2
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	022b      	lsls	r3, r5, #8
 8003750:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003754:	0222      	lsls	r2, r4, #8
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	6849      	ldr	r1, [r1, #4]
 800375a:	0849      	lsrs	r1, r1, #1
 800375c:	2000      	movs	r0, #0
 800375e:	4688      	mov	r8, r1
 8003760:	4681      	mov	r9, r0
 8003762:	eb12 0a08 	adds.w	sl, r2, r8
 8003766:	eb43 0b09 	adc.w	fp, r3, r9
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003778:	4650      	mov	r0, sl
 800377a:	4659      	mov	r1, fp
 800377c:	f7fc fd24 	bl	80001c8 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800378e:	d308      	bcc.n	80037a2 <UART_SetConfig+0x3de>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003796:	d204      	bcs.n	80037a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	e0b6      	b.n	8003910 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037a8:	e0b2      	b.n	8003910 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b2:	d15e      	bne.n	8003872 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d828      	bhi.n	800380e <UART_SetConfig+0x44a>
 80037bc:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <UART_SetConfig+0x400>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037ff 	.word	0x080037ff
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	0800380f 	.word	0x0800380f
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff f846 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80037ec:	61f8      	str	r0, [r7, #28]
        break;
 80037ee:	e014      	b.n	800381a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7ff f858 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80037f4:	61f8      	str	r0, [r7, #28]
        break;
 80037f6:	e010      	b.n	800381a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <UART_SetConfig+0x56c>)
 80037fa:	61fb      	str	r3, [r7, #28]
        break;
 80037fc:	e00d      	b.n	800381a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7fe ffa3 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003802:	61f8      	str	r0, [r7, #28]
        break;
 8003804:	e009      	b.n	800381a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003818:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d077      	beq.n	8003910 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005a      	lsls	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	441a      	add	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b0f      	cmp	r3, #15
 800383a:	d916      	bls.n	800386a <UART_SetConfig+0x4a6>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003842:	d212      	bcs.n	800386a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f023 030f 	bic.w	r3, r3, #15
 800384c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	b29b      	uxth	r3, r3
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	b29a      	uxth	r2, r3
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	4313      	orrs	r3, r2
 800385e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	8afa      	ldrh	r2, [r7, #22]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	e052      	b.n	8003910 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003870:	e04e      	b.n	8003910 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003872:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003876:	2b08      	cmp	r3, #8
 8003878:	d827      	bhi.n	80038ca <UART_SetConfig+0x506>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <UART_SetConfig+0x4bc>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038a5 	.word	0x080038a5
 8003884:	080038ad 	.word	0x080038ad
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038cb 	.word	0x080038cb
 8003890:	080038bb 	.word	0x080038bb
 8003894:	080038cb 	.word	0x080038cb
 8003898:	080038cb 	.word	0x080038cb
 800389c:	080038cb 	.word	0x080038cb
 80038a0:	080038c3 	.word	0x080038c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a4:	f7fe ffe8 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80038a8:	61f8      	str	r0, [r7, #28]
        break;
 80038aa:	e014      	b.n	80038d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ac:	f7fe fffa 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80038b0:	61f8      	str	r0, [r7, #28]
        break;
 80038b2:	e010      	b.n	80038d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <UART_SetConfig+0x56c>)
 80038b6:	61fb      	str	r3, [r7, #28]
        break;
 80038b8:	e00d      	b.n	80038d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ba:	f7fe ff45 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80038be:	61f8      	str	r0, [r7, #28]
        break;
 80038c0:	e009      	b.n	80038d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038c6:	61fb      	str	r3, [r7, #28]
        break;
 80038c8:	e005      	b.n	80038d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038d4:	bf00      	nop
    }

    if (pclk != 0U)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d019      	beq.n	8003910 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	085a      	lsrs	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d909      	bls.n	800390a <UART_SetConfig+0x546>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d205      	bcs.n	800390a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e002      	b.n	8003910 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800391c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	@ 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392a:	bf00      	nop
 800392c:	40008000 	.word	0x40008000
 8003930:	00f42400 	.word	0x00f42400

08003934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a32:	d10a      	bne.n	8003a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b098      	sub	sp, #96	@ 0x60
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a88:	f7fd f84e 	bl	8000b28 <HAL_GetTick>
 8003a8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d12e      	bne.n	8003afa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f88c 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d021      	beq.n	8003afa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e6      	bne.n	8003ab6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e062      	b.n	8003bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d149      	bne.n	8003b9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f856 	bl	8003bc8 <UART_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03c      	beq.n	8003b9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e6      	bne.n	8003b22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b74:	61fa      	str	r2, [r7, #28]
 8003b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	617b      	str	r3, [r7, #20]
   return(result);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e011      	b.n	8003bc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3758      	adds	r7, #88	@ 0x58
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd8:	e04f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d04b      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fc ffa1 	bl	8000b28 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e04e      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d037      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b80      	cmp	r3, #128	@ 0x80
 8003c0e:	d034      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d031      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d110      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f838 	bl	8003ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2208      	movs	r2, #8
 8003c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e029      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c54:	d111      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f81e 	bl	8003ca2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e00f      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d0a0      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b095      	sub	sp, #84	@ 0x54
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e6      	bne.n	8003caa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d118      	bne.n	8003d4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f023 0310 	bic.w	r3, r3, #16
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	613b      	str	r3, [r7, #16]
   return(result);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e6      	bne.n	8003d18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d5e:	bf00      	nop
 8003d60:	3754      	adds	r7, #84	@ 0x54
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <memset>:
 8003d6a:	4402      	add	r2, r0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d100      	bne.n	8003d74 <memset+0xa>
 8003d72:	4770      	bx	lr
 8003d74:	f803 1b01 	strb.w	r1, [r3], #1
 8003d78:	e7f9      	b.n	8003d6e <memset+0x4>
	...

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8003db4 <__libc_init_array+0x38>)
 8003d80:	4c0d      	ldr	r4, [pc, #52]	@ (8003db8 <__libc_init_array+0x3c>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	2600      	movs	r6, #0
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8003dbc <__libc_init_array+0x40>)
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8003dc0 <__libc_init_array+0x44>)
 8003d90:	f000 f818 	bl	8003dc4 <_init>
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	2600      	movs	r6, #0
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08003e2c 	.word	0x08003e2c
 8003db8:	08003e2c 	.word	0x08003e2c
 8003dbc:	08003e2c 	.word	0x08003e2c
 8003dc0:	08003e30 	.word	0x08003e30

08003dc4 <_init>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr

08003dd0 <_fini>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr
